/***************************************************************************
 *            query-field.gob
 *
 *  Copyright  2006  Anas Muzakir
 *  anas.muzakir@gmail.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.0

%headertop{
#include "bima-attribute.h"
%}

class Bima:Query:Field from G:Object { 
	public gchar *table = { NULL }
		destroywith g_free;
	public gchar *field = { NULL }
		destroywith g_free;
	public gchar *alias = { NULL }
		destroywith g_free;
		
	public gint sort_type = 0; //ASC or DESC
	public gint opr_type = 0;

	public BimaQueryField *left_field = {NULL}
		destroy { 
			if (!left_field) 
				return ;
			g_object_unref((GObject *) left_field);
		};
	
	public BimaQueryField *right_field = {NULL}
		destroy { 
			if (!right_field) 
				return ;
			g_object_unref((GObject *) right_field);
		};

	public BimaAttribute *attribute = NULL
		destroy {
			attribute = NULL;
		};

	public 
	gchar *get_str(self) 
	{
		gchar *ostr=NULL;

		if (self->opr_type == 0) {
			if (self->table) 
				ostr = g_strdup_printf("%s.%s",self->table,self->field); 
			else
				ostr = g_strdup(self->field); 
		} 
		else if (self->opr_type < 100) {
			ostr = bima_query_field_get_str(self->left_field);
			switch (self->opr_type) {
				case 1: ostr = g_strconcat(ostr,"=",NULL); break;
				case 2: ostr = g_strconcat(ostr,"+",NULL); break;
				case 3: ostr = g_strconcat(ostr,"-",NULL); break;
				case 4: ostr = g_strconcat(ostr,"*",NULL); break;
				case 5: ostr = g_strconcat(ostr,"/",NULL); break;
				case 6: ostr = g_strconcat(ostr," AND ",NULL); break;
				case 7: ostr = g_strconcat(ostr," OR ",NULL); break;
			}		
			ostr = g_strconcat(ostr,bima_query_field_get_str(self->right_field),NULL);
		} 
		else {
			switch (self->opr_type) {
				case 100: ostr = g_strdup_printf("SUM(");  break;
				case 101: ostr = g_strdup_printf("COUNT("); break;
				case 102: ostr = g_strdup_printf("AVG(");  break; 
				case 103: ostr = g_strdup_printf("MAX(");  break;
				case 104: ostr = g_strdup_printf("MIN(");  break;
				case 105: ostr = g_strdup_printf("STDDEV(");  break;
				case 106: ostr = g_strdup_printf("VARIANCE(");  break;
			}
			ostr = g_strconcat(ostr,bima_query_field_get_str(self->right_field),")",NULL);
		}
	
		if (self->alias) 
			ostr = g_strconcat(ostr,g_strdup_printf(" AS %s",self->alias),NULL);
		
		return ostr;		
	}
		
	public BimaQueryField*
	new (void)
	{
		return GET_NEW;
	}

}
