/* Generated by GOB (v2.0.13)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include "bima-query-field.h"
#include "bima-entity.h"
//#include "property.h"

#ifndef __BIMA_QUERY_TABLE_H__
#define __BIMA_QUERY_TABLE_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



#ifndef __TYPEDEF_BIMA_QUERY__
#define __TYPEDEF_BIMA_QUERY__
typedef struct _BimaQuery BimaQuery;

#endif

extern BimaAttribute *bima_query_get_attribute_subquery();
extern GList *bima_relation_get_attributes();

//extern void 
//bima_property_combo_model_list_add(char *prop_name, gchar *title, gchar *str_val, gint *int_val);

extern gchar *bima_query_get_str(BimaQuery *self);
extern gint bima_query_count_number_of_fields(BimaQuery *self);
extern GObject *bima_query_get_nth_attribute_sub(BimaQuery *self, gint n);


/*
 * Type checking and casting macros
 */
#define BIMA_TYPE_QUERY_TABLE	(bima_query_table_get_type())
#define BIMA_QUERY_TABLE(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), bima_query_table_get_type(), BimaQueryTable)
#define BIMA_QUERY_TABLE_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), bima_query_table_get_type(), BimaQueryTable const)
#define BIMA_QUERY_TABLE_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), bima_query_table_get_type(), BimaQueryTableClass)
#define BIMA_IS_QUERY_TABLE(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), bima_query_table_get_type ())

#define BIMA_QUERY_TABLE_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), bima_query_table_get_type(), BimaQueryTableClass)

/*
 * Main object structure
 */
#ifndef __TYPEDEF_BIMA_QUERY_TABLE__
#define __TYPEDEF_BIMA_QUERY_TABLE__
typedef struct _BimaQueryTable BimaQueryTable;
#endif
struct _BimaQueryTable {
	GObject __parent__;
	/*< public >*/
	gint num_fields;
	gchar * alias;
	gchar * table;
	BimaQuery * sub_query;
	gint join_type;
	BimaQueryField * join_rule;
	BimaQueryTable * left_table;
	BimaQueryTable * right_table;
	GObject * entity;
};

/*
 * Class definition
 */
typedef struct _BimaQueryTableClass BimaQueryTableClass;
struct _BimaQueryTableClass {
	GObjectClass __parent__;
};


/*
 * Public methods
 */
GType	bima_query_table_get_type	(void);
gchar * 	bima_query_table_get_entity_alias	(BimaQueryTable * self,
					BimaEntity * entity);
BimaAttribute * 	bima_query_table_validate_field	(BimaQueryTable * self,
					BimaQueryField * qfield);
gint 	bima_query_table_count_number_of_fields	(BimaQueryTable * self,
					gchar * star_tbl);
GObject * 	bima_query_table_get_nth_attribute	(BimaQueryTable * self,
					gchar * star_tbl,
					gint n,
					gint * nth,
					BimaQueryTable ** qtbl);
gchar * 	bima_query_table_get_str	(BimaQueryTable * self);
BimaQueryTable * 	bima_query_table_new	(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
